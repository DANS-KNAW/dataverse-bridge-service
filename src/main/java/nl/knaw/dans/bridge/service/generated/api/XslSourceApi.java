/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package nl.knaw.dans.bridge.service.generated.api;

import nl.knaw.dans.bridge.service.generated.model.IngestData;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-11-13T20:06:05.738+01:00[Europe/Amsterdam]")

@Api(value = "xsl-source", description = "the xsl-source API")
public interface XslSourceApi {

    Logger log = LoggerFactory.getLogger(XslSourceApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "get xls", nickname = "getXsl", notes = "todo", tags={ "XSL", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Plugin succesfully added."),
        @ApiResponse(code = 400, message = "Plugi couldn't have been added."),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/xsl-source",
        method = RequestMethod.GET)
    default ResponseEntity<Void> getXsl(@NotNull @ApiParam(value = "todo", required = true) @Valid @RequestParam(value = "xsl-name", required = true) String xslName,@NotNull @ApiParam(value = "todo", required = true) @Valid @RequestParam(value = "source-name", required = true) String sourceName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default XslSourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "modify xls", nickname = "modifyXls", notes = "todo", tags={ "XSL", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Plugin succesfully added."),
        @ApiResponse(code = 400, message = "Plugi couldn't have been added."),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/xsl-source",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> modifyXls(@ApiParam(value = "Dataset object that needs to be added to the Archived's table." ,required=true )  @Valid @RequestBody IngestData body,@ApiParam(value = "" ,required=true) @RequestHeader(value="api_key", required=true) String apiKey,@ApiParam(value = "todo" ,required=true) @RequestHeader(value="source-name", required=true) String sourceName,@ApiParam(value = "todo" ,required=true) @RequestHeader(value="xsl-name", required=true) String xslName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default XslSourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "upload xls", nickname = "uplodXls", notes = "todo", tags={ "XSL", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Plugin succesfully added."),
        @ApiResponse(code = 400, message = "Plugi couldn't have been added."),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/xsl-source",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> uplodXls(@ApiParam(value = "Dataset object that needs to be added to the Archived's table." ,required=true )  @Valid @RequestBody IngestData body,@ApiParam(value = "" ,required=true) @RequestHeader(value="api_key", required=true) String apiKey,@ApiParam(value = "todo" ,required=true) @RequestHeader(value="source-name", required=true) String sourceName,@ApiParam(value = "todo" ,required=true) @RequestHeader(value="xsl-name", required=true) String xslName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default XslSourceApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
