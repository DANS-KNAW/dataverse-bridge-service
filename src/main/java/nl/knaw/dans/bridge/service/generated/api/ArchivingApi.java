/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package nl.knaw.dans.bridge.service.generated.api;

import nl.knaw.dans.bridge.service.generated.model.IngestData;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-11-13T20:06:05.738+01:00[Europe/Amsterdam]")

@Api(value = "archiving", description = "the archiving API")
public interface ArchivingApi {

    Logger log = LoggerFactory.getLogger(ArchivingApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Operation to retrive a state of an Archived dataset", nickname = "getArchivingState", notes = "Operation to retrive a state of an archiving dataset by filtering pid, version, dar destination.", response = nl.knaw.dans.bridge.service.db.domain.ArchivingAuditLog.class, tags={ "Archiving", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = nl.knaw.dans.bridge.service.db.domain.ArchivingAuditLog.class),
        @ApiResponse(code = 400, message = "Invalid state value") })
    @RequestMapping(value = "/archiving/state",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<nl.knaw.dans.bridge.service.db.domain.ArchivingAuditLog> getArchivingState(@NotNull @ApiParam(value = "todo", required = true) @Valid @RequestParam(value = "srcMetadataUrl", required = true) String srcMetadataUrl,@NotNull @ApiParam(value = "todo", required = true) @Valid @RequestParam(value = "srcMetadataVersion", required = true) String srcMetadataVersion,@NotNull @ApiParam(value = "todo", required = true) @Valid @RequestParam(value = "destinationDar", required = true) String destinationDar) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ArchivingApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Operation to Ingest dataset to DAR", nickname = "ingestToDar", notes = "", response = nl.knaw.dans.bridge.service.db.domain.ArchivingAuditLog.class, tags={ "Archiving", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Dataset succesfully created.", response = nl.knaw.dans.bridge.service.db.domain.ArchivingAuditLog.class),
        @ApiResponse(code = 400, message = "Dataset couldn't have been created."),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/archiving",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<nl.knaw.dans.bridge.service.db.domain.ArchivingAuditLog> ingestToDar(@ApiParam(value = "Dataset object that needs to be added to the Archived's table." ,required=true )  @Valid @RequestBody IngestData body,@ApiParam(value = "" ,required=true) @RequestHeader(value="api_key", required=true) String apiKey,@ApiParam(value = "When the request comes from machine to machine, it is likely doesn't need authentication check of DAR credentials before ingest data." ) @RequestHeader(value="skipDarAuthPreCheck", required=false) Boolean skipDarAuthPreCheck,@ApiParam(value = "By default, the archiving process is done using async process. However some process need in a scync way." ) @RequestHeader(value="sync", required=false) Boolean sync) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ArchivingApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
